#
probe backend_health_check {
<% if @varnish_backend_health_check_url -%>
    .url = "<%= @varnish_backend_health_check_url %>";
<% else -%>
    .url = "/ping.txt";
<% end -%>
<% if @varnish_backend_health_check_timeout -%>
    .timeout = <%= @varnish_backend_health_check_timeout %>;
<% else -%>
    .timeout = 300ms;
<% end -%>
<% if @varnish_backend_health_check_interval -%>
    .interval = <%= @varnish_backend_health_check_interval %>;
<% else -%>
    .interval = 1s;
<% end -%>
<% if @varnish_backend_health_check_window -%>
    .window = <%= @varnish_backend_health_check_window %>;
<% else -%>
    .window = 10;
<% end -%>
<% if @varnish_backend_health_check_threshold -%>
    .threshold = <%= @varnish_backend_health_check_threshold %>;
<% else -%>
    .threshold = 6;
<% end -%>
<% if @varnish_backend_health_check_expected_response -%>
    .expected_response = <%= @varnish_backend_health_check_expected_response %>;
<% else -%>
    .expected_response = 200;
<% end -%>
}

<%
  backends = []
  hosts    = []

  if @varnish_backends
    if @varnish_backends.kind_of?(Array)
      hosts = @varnish_backends
    else
      if @varnish_backends =~ /, /
        hosts = @varnish_backends.split(', ')
      elsif @varnish_backends =~ /,/
        hosts = @varnish_backends.split(',')
      else
        hosts = @varnish_backends.split
      end
    end
  else
    hosts = [ 'localhost' ]
  end

  backends = hosts.map do |host|
    if host =~ /:/
      host.split(':')
    else
      [ host, '80' ]
    end
  end
-%>
<% 
  if @varnish_backend_first_byte_timeout
    first_byte_timeout = @varnish_backend_first_byte_timeout
  else
    first_byte_timeout = '90s'
  end

  if @varnish_between_bytes_timeout
    between_bytes_timeout = @varnish_between_bytes_timeout
  else
    between_bytes_timeout = '60s'
  end

  if @varnish_connect_timeout
    connect_timeout = @varnish_connect_timeout
  else
    connect_timeout = '10s'
  end

  backends.enum_with_index do |v,i|
-%>
backend backend<%= i %> {
    .host = "<%= v[0] %>";
    <%- if @cq5_env == "qa06" -%>
    .port = "8888";
    <%- else -%>
    .port = "<%= v[1] %>";
    <%- end -%>
    .first_byte_timeout = <%= first_byte_timeout %>;
    .between_bytes_timeout = <%= between_bytes_timeout %>;
    .connect_timeout = <%= connect_timeout %>;
    .probe = backend_health_check;
}

<% end -%>

backend fake { .host = "127.0.0.1"; .port = "12871"; .probe = backend_health_check; }

director default round-robin {
<% backends.each_index do |i| -%>
    { .backend = backend<%= i %>; }
<% end -%>
}

<%
  purge_acls = []

  if @varnish_purge_acls
    if @varnish_purge_acls.kind_of?(Array)
      purge_acls = @varnish_purge_acls
    else
      if @varnish_purge_acls =~ /, /
        purge_acls = @varnish_purge_acls.split(', ')
      elsif @varnish_purge_acls =~ /,/
        purge_acls = @varnish_purge_acls.split(',')
      else
        purge_acls = @varnish_purge_acls.split
      end
    end
  else
    purge_acls = [ '"localhost"' ]
  end
-%>

acl purge {
<% purge_acls.each do |acl| -%>
    <%= acl %>;
<% end -%>
}

import std;
import var;
import curl;
include "devicedetect.vcl";
include "security/security.vcl";

# CLDINFR-162
# Strip out Google Analytics campaign variables ( utm_source, utm_medium, utm_campaign, gclid )
# They are only needed by the javascript running on the page.
# src: http://stackoverflow.com/questions/13144172/stripping-out-select-querystring-attribute-value-pairs-so-varnish-will-not-vary
sub normalize_req_url {
    if(req.url ~ "(\?|&)(gclid|cx|ie|cof|siteurl|zanpid|origin|utm_[a-z]+|mr:[A-z]+)=") {
        set req.url = regsuball(req.url, "(gclid|cx|ie|cof|siteurl|zanpid|origin|utm_[a-z]+|mr:[A-z]+)=[%.-_A-z0-9]+&?", "");
    }
    set req.url = regsub(req.url, "(\?&?)$", "");
}

sub vcl_recv {
    call normalize_req_url;
    call devicedetect;
    call security_dailybeast;

    if (req.request == "PURGE") {
        ban("req.http.host == " + req.http.host + " && req.url ~ " + req.url + "$");
        error 200 "Purged.";
    }

    # -- Allow cdn to access only static assets     
    if ( (req.http.user-agent ~ "Amazon CloudFront") && req.url !~ "\.(gif|jpg|jpeg|bmp|png|tiff|tif|ico|img|tga|wmf|css|xml|js|svg|swf|ico|mp3|mp4|m4a|ogg|mov|avi|wmv|json|woff|woff2|ttf|eot|zip)$" ) {
    error 403 "Forbidden";
    }

    # -- Disallow https access to everything static resources or user pages
    if ( (req.http.X-Forwarded-Proto ~ "https") && (req.url !~ "\.(gif|jpg|jpeg|bmp|png|tiff|tif|ico|img|tga|wmf|css|xml|js|svg|swf|ico|mp3|mp4|m4a|ogg|mov|avi|wmv|json|woff|woff2|ttf|eot|zip).*$")
        && (req.url !~ "^(/content)?/user.*") ) {
    error 753 "Moved Permanently";
    }
    
    # -- Restart Logic and magicmarker
    if ( req.http.magicmarker && req.http.magicmarker == "fake" ) {
        unset req.http.magicmarker;
        set req.backend = fake;
    } else {
       set req.backend = default;
    }

    # -- Normalize Accept-Encoding to avoid duplicate cache
    # -- https://www.varnish-cache.org/trac/wiki/VCLExampleNormalizeAcceptEncoding
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
            # No point in compressing these
            remove req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } elsif (req.http.Accept-Encoding ~ "deflate") {
            set req.http.Accept-Encoding = "deflate";
        } else {
            # unkown algorithm
            remove req.http.Accept-Encoding;
        }
    }            

    # -- Allow Purging from purge acl clients
    if (req.request == "PURGE") {
        if (!client.ip ~ purge) {
            error 405 "Not allowed.";
        }
        return(lookup);
    }

<% if @varnish_ddos_prevention == 'on' -%>
    if (req.request == "POST") {
      error 501 "Not Implemented";
    }
<% end -%>

    # -- Redirect to SSL if it's a /content/user page
    if ( req.url ~ "^(/content)?/user.*" ) {
      if ( req.http.X-Forwarded-Proto ~ "^http$" ) {
        error 752 "Moved Permanently";
      }
    }

<% if @env == 'stage' or @env == 'qa' -%>
    if (req.http.Cookie) {
      set req.http.X-SIMPLE-AUTH = ";" + req.http.Cookie;
      set req.http.X-SIMPLE-AUTH = regsuball(req.http.X-SIMPLE-AUTH, "; +", ";");
      set req.http.X-SIMPLE-AUTH = regsuball(req.http.X-SIMPLE-AUTH, ";(x-simple-auth)=", "; \1=");
      set req.http.X-SIMPLE-AUTH = regsuball(req.http.X-SIMPLE-AUTH, ";[^ ][^;]*", "");
      set req.http.X-SIMPLE-AUTH = regsuball(req.http.X-SIMPLE-AUTH, "^[; ]+|[; ]+$", "");

      if (req.http.Cookie == "") {
        remove req.http.Cookie;
      }
    }
<% end -%>

    # CLDINFR-663 -- Remove Cookies rules
    if (req.request != "POST") {
      unset req.http.cookie;
    }

    # -- Unset Authorization Header, we don't have any basic auth protected pages
    unset req.http.Authorization;

    # -- Set Grace. This is the amount of time that we will serve stale content.
    if (req.backend.healthy) {
       set req.grace = 1d;
       std.log ("[Receive] " + req.url + "(Back-end " + req.backend + " healthy, Grace: " + req.grace + ")");
    } else {
       set req.grace = 1d;
       std.log ("[Receive] " + req.url + "(Back-end " + req.backend + " unhealthy, Grace: " + req.grace + ")");
    }
}

sub vcl_pipe {
    set bereq.http.connection = "close";
}

sub vcl_hit {
    if (req.request == "PURGE") {
        purge;
        error 200 "Purged.";
    }
}

sub vcl_miss {
    if (req.request == "PURGE") {
        purge;
        error 200 "Purged.";
    }
}

sub vcl_fetch {
    if ( beresp.ttl > 0s ) {
        unset beresp.http.expires;
        set beresp.http.Cache-Control = "max-age=3600";
        set beresp.ttl = 1h;
        set beresp.grace = 1d;
        set beresp.http.magicmarker = "1";
    }

    if ( beresp.status >= 500 ) {
        set beresp.saintmode = 20s;
        set beresp.ttl = 30s;
        std.log ("[Fetch ] " + bereq.url + " (Saint: 20s)");
        if (req.request != "POST") {
            # FYI: https://www.varnish-cache.org/trac/wiki/VCLExampleSaintMode
            return(restart);
        } else {
            error 500 "Fail";
        }

    } else if ( beresp.status >= 400 && req.url ~ "\/etc\/clientlibs\/") {
        set beresp.ttl = 1h;
        set beresp.http.Cache-Control = "max-age=3600";
    } else if ( beresp.status >= 400 ) {
        set beresp.ttl = 30s;
        set beresp.http.Cache-Control = "max-age=30";

    } else if ( req.url ~ "\.cached\." ) {
        set beresp.ttl = 1h;
        set beresp.http.Cache-Control = "max-age=3600";
    } else if ( req.url ~ "^/etc/clientlibs" ) {
        set beresp.ttl = 1h;
        set beresp.http.Cache-Control = "max-age=3600";
    } else if ( req.url ~ "sitemap(.*)?\.(xml|html)$" ) {
        set beresp.http.Cache-Control = "max-age=1800";
        set beresp.ttl = 30m;
    } else if ( req.url ~ ".*sidebar.*json" ) {
        set beresp.http.Cache-Control = "max-age=300";
        set beresp.ttl = 5m;
    } else if ( req.url ~ ".*\.view\.json.*" ) {
        set beresp.ttl = 10m;
        set beresp.http.Cache-Control = "max-age=600";
    } else if ( req.url ~ "\.(xml|json)$" ) {
        set beresp.ttl = 1m;
        set beresp.http.Cache-Control = "max-age=60";
    }
   
    # -- Change Server Signature 
    unset beresp.http.Server; 
    set beresp.http.Server = "Apache";

    # allow CORS from any domain so that fonts can be served off cloudfront :/
    set beresp.http.Access-Control-Allow-Origin = "*";

    # -- We want to cache everything so remove backend Set-Cookie headers except auth ones
    if ( !( beresp.http.Set-Cookie ~ "(nb_.*|audience_segment|audience_segment_source)") ) {
        unset beresp.http.Set-Cookie;
    }

    # so, this is a bit conterintuitive. The backend creates content based on the normalized User-Agent,
    # but we use Vary on X-UA-Device so Varnish will use the same cached object for all U-As that map to
    # the same X-UA-Device.
    # If the backend does not mention in Vary that it has crafted special
    # content based on the User-Agent (==X-UA-Device), add it.
    # If your backend does set Vary: User-Agent, you may have to remove that here.
    if (req.http.X-UA-Device) {
        if (!beresp.http.Vary) { # no Vary at all
            set beresp.http.Vary = "X-UA-Device";
        } elseif (beresp.http.Vary !~ "X-UA-Device") { # add to existing Vary
            set beresp.http.Vary = beresp.http.Vary + ", X-UA-Device";
        }
    }
    # comment this out if you don't want the client to know your classification
    set beresp.http.X-UA-Device = req.http.X-UA-Device;

    set beresp.http.X-Cacheable = "YES";
    std.log ("[Fetch ] " + bereq.url + " (Grace: " + beresp.grace + ", TTL: " + beresp.ttl + ", Status: " + beresp.status + ", Cacheable: YES)");
}

sub vcl_deliver {
    if (resp.http.magicmarker) {
        unset resp.http.magicmarker;
        set resp.http.RealAge = resp.http.Age;
        set resp.http.Age = "0";
    }

    # -- add cache hits
    if ( obj.hits > 0 ) {
        set resp.http.X-Cache = "HIT";
        set resp.http.X-Cache-Hits = obj.hits;
    } else {
        set resp.http.X-Cache = "MISS";
    }
    
    set resp.http.X-BackEnd = req.backend;
    set resp.http.X-Restarts = req.restarts;

    # to keep any caches in the wild from serving wrong content to client #2 behind them, we need to
    # transform the Vary on the way out.
    if ((req.http.X-UA-Device) && (resp.http.Vary)) {
        set resp.http.Vary = regsub(resp.http.Vary, "X-UA-Device", "User-Agent");
    }
    
    return (deliver);
}

sub vcl_error {
    # -- redirect, error sent from vcl_recv
    if ( obj.status == 750 ) {
        set obj.http.Location = obj.response;
        set obj.status = 301;
        return(deliver);
    }

    if ( obj.status == 751 ) {
        set obj.http.Location = "https://"+req.http.host+"/content/user/account/resume.html?referrer="+var.get_string("url")+"&reason="+var.get_string("reason");
        set obj.status = 302;
        return(deliver);
    }

    if ( obj.status == 752 ) {
      set obj.http.Location = "https://"+req.http.host+req.url;
      set obj.status = 301;
      return(deliver);
    }

    if ( obj.status == 753 ) {
      set obj.http.Location = "http://"+req.http.host+req.url;
      set obj.status = 301;
      return(deliver);
    }

    std.log ("[Error ] " + req.url + " (Status: " + obj.status + ", Restarts: " + req.restarts + ")");

    if ( obj.status >= 500 && req.restarts < 3 ) {
        set obj.http.X-Restarts = req.restarts;
        if ( req.restarts == 0 ) {
            set req.http.magicmarker = "fake";
        }
        return(restart);
    }

    if ( obj.status == 404 ) {
      set obj.http.Content-Type = "text/html; charset=utf-8";
      synthetic std.fileread("/etc/varnish/errors/404.html");
      return(deliver);
    } else {
      set obj.http.Content-Type = "text/html; charset=utf-8";
      synthetic std.fileread("/etc/varnish/errors/500.html");
      return(deliver);
    }
}

<% if @env == 'stage' or @env == 'qa' -%>
sub vcl_hash {
    hash_data(req.http.X-SIMPLE-AUTH);
}
<% end -%>
