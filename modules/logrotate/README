= PUPPET MODULE:
  logrotate

== REQUIREMENTS:

=== Platform and Application Environment:

Tested on Ubuntu 12.04.

== USAGE:

# Simple default install

class { 'logrotate' : }
include logrotate

# The AntiClass pattern

class { 'logrotate' : installed => false }

# Logrotate::Rule
# Used for creating custom rules in /etc/logrotate.d
# Currently supports all logrotate parameters with robust sanity checking
# thanks to rodjek.

# Instead of supplying command/[no]command style, this uses booleans and will
# then DO THE RIGHT THING when creating the template with the logrotate way
# of negation

# For example, compress => false will create the option nocompress in the
# logrotate script

# Available parameters
namevar         - The String name of the rule.
path            - The path String to the logfile(s) to be rotated.
ensure          - The desired state of the logrotate rule as a String.  Valid
                  values are 'absent' and 'present' (default: 'present').
compress        - A Boolean value specifying whether the rotated logs should
                  be compressed (optional).
compresscmd     - The command String that should be executed to compress the
                  rotated logs (optional).
compressext     - The extention String to be appended to the rotated log files
                  after they have been compressed (optional).
compressoptions - A String of command line options to be passed to the
                  compression program specified in `compresscmd` (optional).
copy            - A Boolean specifying whether logrotate should just take a 
                  copy of the log file and not touch the original (optional).
copytruncate    - A Boolean specifying whether logrotate should truncate the
                  original log file after taking a copy (optional).
create          - A Boolean specifying whether logrotate should create a new
                  log file immediately after rotation (optional).
create_mode     - An octal mode String logrotate should apply to the newly
                  created log file if create => true (optional).
create_owner    - A username String that logrotate should set the owner of the
                  newly created log file to if create => true (optional).
create_group    - A String group name that logrotate should apply to the newly
                  created log file if create => true (optional).
dateext         - A Boolean specifying whether rotated log files should be
                  archived by adding a date extension rather just a number
                  (optional).
dateformat      - The format String to be used for `dateext` (optional).
                  Valid specifiers are '%Y', '%m', '%d' and '%s'.
delaycompress   - A Boolean specifying whether compression of the rotated
                  log file should be delayed until the next logrotate run
                  (optional).
extension       - Log files with this extension String are allowed to keep it
                  after rotation (optional).
ifempty         - A Boolean specifying whether the log file should be rotated
                  even if it is empty (optional).
mail            - The email address String that logs that are about to be 
                  rotated out of existence are emailed to (optional).
mailfirst       - A Boolean that when used with `mail` has logrotate email the
                  just rotated file rather than the about to expire file
                  (optional).
maillast        - A Boolean that when used with `mail` has logrotate email the
                  about to expire file rather than the just rotated file
                  (optional).
maxage          - The Integer maximum number of days that a rotated log file
                  can stay on the system (optional).
minsize         - The String minimum size a log file must be to be rotated,
                  but not before the scheduled rotation time (optional).
                  The default units are bytes, append k, M or G for kilobytes,
                  megabytes and gigabytes respectively.
missingok       - A Boolean specifying whether logrotate should ignore missing
                  log files or issue an error (optional).
olddir          - A String path to a directory that rotated logs should be
                  moved to (optional).
postrotate      - A command String that should be executed by /bin/sh after
                  the log file is rotated (optional).
prerotate       - A command String that should be executed by /bin/sh before
                  the log file is rotated and only if it will be rotated
                  (optional).
firstaction     - A command String that should be executed by /bin/sh once
                  before all log files that match the wildcard pattern are
                  rotated (optional).
lastaction      - A command String that should be execute by /bin/sh once 
                  after all the log files that match the wildcard pattern are
                  rotated (optional).
rotate          - The Integer number of rotated log files to keep on disk
                  (optional).
rotate_every    - How often the log files should be rotated as a String.
                  Valid values are 'day', 'week', 'month' and 'year'
                  (optional).  Please note, older versions of logrotate do not
                  support yearly log rotation.
size            - The String size a log file has to reach before it will be
                  rotated (optional).  The default units are bytes, append k,
                  M or G for kilobytes, megabytes or gigabytes respectively.
sharedscripts   - A Boolean specifying whether logrotate should run the 
                  postrotate and prerotate scripts for each matching file or
                  just once (optional).
shred           - A Boolean specifying whether logs should be deleted with
                  shred instead of unlink (optional).
shredcycles     - The Integer number of times shred should overwrite log files
                  before unlinking them (optional).
start           - The Integer number to be used as the base for the extensions
                  appended to the rotated log files (optional).
uncompresscmd   - The String command to be used to uncompress log files
                  (optional).

== Sample Usage:

logrotate::rule { 'varnish' :
  path          => [ '/var/log/varnish/varnishncsa.log',
                    '/var/log/varnish/varnish-syslog-traditional.log',
                  ],
  compress      => true,
  delaycompress => true,
  missingok     => true,
  ifempty       => true,
  rotate_every  => 'day',
  rotate        => '30',
  postrotate    => 'reload rsyslogd >/dev/null 2>&1 || true',
}

logrotate::rule { 'monit' :
  path          => '/var/log/monit.log',
  rotate        => '4',
  rotate_every  => 'week',
  minsize       => '1M',
  missingok     => true,
  create        => true,
  create_mode   => '0640',
  create_owner  => 'root',
  create_group  => 'adm',
  compress      => true,
  delaycompress => true,
  postrotate    => 'invoke-rc.d monit reload > /dev/null',
}

== CAVEATS:

May work on other platforms. Only tested on Ubuntu 12.04. Currently
Ubuntu/Debian is only explicitly supported vi the params.pp. You can add other
OS support via that class.

== LICENSE:

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Copyright (c) 2012 Tim Sharpe

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
