#
# Based upon the NCSA server configuration files originally by Rob McCool.
#
# This is the main Apache server configuration file.  It contains the
# configuration directives that give the server its instructions.
# See http://httpd.apache.org/docs/2.2/ for detailed information about
# the directives.
#
# Do NOT simply read the instructions in here without understanding
# what they do.  They're here only as hints or reminders.  If you are unsure
# consult the online docs. You have been warned.  
#
# The configuration directives are grouped into three basic sections:
#  1. Directives that control the operation of the Apache server process as a
#     whole (the 'global environment').
#  2. Directives that define the parameters of the 'main' or 'default' server,
#     which responds to requests that aren't handled by a virtual host.
#     These directives also provide default values for the settings
#     of all virtual hosts.
#  3. Settings for virtual hosts, which allow Web requests to be sent to
#     different IP addresses or hostnames and have them handled by the
#     same Apache server process.
#
# Configuration and logfile names: If the filenames you specify for many
# of the server's control files begin with "/" (or "drive:/" for Win32), the
# server will use that explicit path.  If the filenames do *not* begin
# with "/", the value of ServerRoot is prepended -- so "foo.log"
# with ServerRoot set to "/etc/apache2" will be interpreted by the
# server as "/etc/apache2/foo.log".
#

### Section 1: Global Environment
#
# The directives in this section affect the overall operation of Apache,
# such as the number of concurrent requests it can handle or where it
# can find its configuration files.
#

#
# ServerRoot: The top of the directory tree under which the server's
# configuration, error, and log files are kept.
#
# NOTE!  If you intend to place this on an NFS (or otherwise network)
# mounted filesystem then please read the LockFile documentation (available
# at <URL:http://httpd.apache.org/docs/2.2/mod/mpm_common.html#lockfile>);
# you will save yourself a lot of trouble.
#
# Do NOT add a slash at the end of the directory path.
#
<% if @apache_server_root -%>
ServerRoot "<%= @apache_server_root %>"
<% else -%>
#ServerRoot "/etc/apache2"
<% end -%>

#
# The accept serialization lock file MUST BE STORED ON A LOCAL DISK.
#
<% if @apache_lock_file -%>
LockFile ${APACHE_LOCK_DIR}/<%= @apache_lock_file %>
<% else -%>
LockFile ${APACHE_LOCK_DIR}/accept.lock
<% end -%>

#
# PidFile: The file in which the server should record its process
# identification number when it starts.
# This needs to be set in /etc/apache2/envvars
#
PidFile ${APACHE_PID_FILE}

#
# Timeout: The number of seconds before receives and sends time out.
#
<% if @apache_timeout -%>
Timeout <%= @apache_timeout -%>
<% else -%>
Timeout 300
<% end -%>

#
# KeepAlive: Whether or not to allow persistent connections (more than
# one request per connection). Set to "Off" to deactivate.
#
<% if @apache_keepalive =~ /on/i -%>
KeepAlive On
<% else -%>
KeepAlive Off
<% end -%>

#
# MaxKeepAliveRequests: The maximum number of requests to allow
# during a persistent connection. Set to 0 to allow an unlimited amount.
# We recommend you leave this number high, for maximum performance.
#
<% if @apache_max_keep_alive_requests -%>
MaxKeepAliveRequests <%= @apache_max_keep_alive_requests -%>
<% else -%>
MaxKeepAliveRequests 100
<% end -%>

#
# KeepAliveTimeout: Number of seconds to wait for the next request from the
# same client on the same connection.
#
<% if @apache_keep_alive_timeout -%>
KeepAliveTimeout <%= @apache_keep_alive_timeout -%>
<% else -%>
KeepAliveTimeout 5
<% end -%>

##
## Server-Pool Size Regulation (MPM specific)
## 

# prefork MPM
# StartServers: number of server processes to start
# MinSpareServers: minimum number of server processes which are kept spare
# MaxSpareServers: maximum number of server processes which are kept spare
# MaxClients: maximum number of server processes allowed to start
# MaxRequestsPerChild: maximum number of requests a server process serves
<IfModule mpm_prefork_module>
<% if @apache_prefork_start_servers -%>
    StartServers          <%= @apache_prefork_start_servers %>
<% else -%>
    StartServers          5
<% end -%>
<% if @apache_prefork_min_spare_servers -%>
    MinSpareServers       <%= @apache_prefork_min_spare_servers %>
<% else -%>
    MinSpareServers       5
<% end -%>
<% if @apache_prefork_max_spare_servers -%>
    MaxSpareServers       <%= @apache_prefork_max_spare_servers %>
<% else -%>
    MaxSpareServers      10
<% end -%>
<% if @apache_prefork_max_clients -%>
    MaxClients            <%= @apache_prefork_max_clients %>
<% else -%>
    MaxClients          150
<% end -%>
<% if @apache_prefork_max_requests_per_child -%>
    MaxRequestsPerChild   <%= @apache_prefork_max_requests_per_child %>
<% else -%>
    MaxRequestsPerChild   0
<% end -%>
</IfModule>

# worker MPM
# StartServers: initial number of server processes to start
# MinSpareThreads: minimum number of worker threads which are kept spare
# MaxSpareThreads: maximum number of worker threads which are kept spare
# ThreadLimit: ThreadsPerChild can be changed to this maximum value during a
#              graceful restart. ThreadLimit can only be changed by stopping
#              and starting Apache.
# ThreadsPerChild: constant number of worker threads in each server process
# MaxClients: maximum number of simultaneous client connections
# MaxRequestsPerChild: maximum number of requests a server process serves
<IfModule mpm_worker_module>
<% if @apache_worker_start_servers -%>
    StartServers          <%= @apache_worker_start_servers %>
<% else -%>
    StartServers          2
<% end -%>
<% if @apache_worker_min_spare_threads -%>
    MinSpareThreads       <%= @apache_worker_min_spare_threads %>
<% else -%>
    MinSpareThreads      25
<% end -%>
<% if @apache_worker_max_spare_threads -%>
    MaxSpareThreads       <%= @apache_worker_max_spare_threads %>
<% else -%>
    MaxSpareThreads      75
<% end -%>
<% if @apache_worker_thread_limit -%>
    ThreadLimit           <%= @apache_worker_thread_limit %>
<% else -%>
    ThreadLimit          64
<% end -%>
<% if @apache_worker_thread_per_child -%>
    ThreadPerChild        <%= @apache_worker_thread_per_child %>
<% else -%>
    ThreadPerChild       25
<% end -%>
<% if @apache_worker_max_clients -%>
    MaxClients            <%= @apache_worker_max_clients %>
<% else -%>
    MaxClients          150
<% end -%>
<% if @apache_worker_max_requests_per_child -%>
    MaxRequestsPerChild   <%= @apache_worker_max_requests_per_child %>
<% else -%>
    MaxRequestsPerChild   0
<% end -%>
</IfModule>

# event MPM
# StartServers: initial number of server processes to start
# MinSpareThreads: minimum number of worker threads which are kept spare
# MaxSpareThreads: maximum number of worker threads which are kept spare
# ThreadsPerChild: constant number of worker threads in each server process
# MaxClients: maximum number of simultaneous client connections
# MaxRequestsPerChild: maximum number of requests a server process serves
<IfModule mpm_event_module>
<% if @apache_event_start_servers -%>
    StartServers          <%= @apache_event_start_servers %>
<% else -%>
    StartServers          2
<% end -%>
<% if @apache_event_min_spare_threads -%>
    MinSpareThreads       <%= @apache_event_min_spare_threads %>
<% else -%>
    MinSpareThreads      25
<% end -%>
<% if @apache_event_max_spare_threads -%>
    MaxSpareThreads       <%= @apache_event_max_spare_threads %>
<% else -%>
    MaxSpareThreads      75
<% end -%>
<% if @apache_event_thread_limit -%>
    ThreadLimit           <%= @apache_event_thread_limit %>
<% else -%>
    ThreadLimit          64
<% end -%>
<% if @apache_event_thread_per_child -%>
    ThreadPerChild        <%= @apache_event_thread_per_child %>
<% else -%>
    ThreadPerChild       25
<% end -%>
<% if @apache_event_max_clients -%>
    MaxClients            <%= @apache_event_max_clients %>
<% else -%>
    MaxClients          150
<% end -%>
<% if @apache_event_max_requests_per_child -%>
    MaxRequestsPerChild   <%= @apache_event_max_requests_per_child %>
<% else -%>
    MaxRequestsPerChild   0
<% end -%>
</IfModule>

# These need to be set in /etc/apache2/envvars
User ${APACHE_RUN_USER}
Group ${APACHE_RUN_GROUP}

#
# AccessFileName: The name of the file to look for in each directory
# for additional configuration directives.  See also the AllowOverride
# directive.
#

AccessFileName .htaccess

#
# The following lines prevent .htaccess and .htpasswd files from being 
# viewed by Web clients. 
#
<Files ~ "^\.ht">
    Order allow,deny
    Deny from all
    Satisfy all
</Files>

#
# DefaultType is the default MIME type the server will use for a document
# if it cannot otherwise determine one, such as from filename extensions.
# If your server contains mostly text or HTML documents, "text/plain" is
# a good value.  If most of your content is binary, such as applications
# or images, you may want to use "application/octet-stream" instead to
# keep browsers from trying to display binary files as though they are
# text.
#
# It is also possible to omit any default MIME type and let the
# client's browser guess an appropriate action instead. Typically the
# browser will decide based on the file's extension then. In cases
# where no good assumption can be made, letting the default MIME type
# unset is suggested  instead of forcing the browser to accept
# incorrect  metadata.
#
<% if @apache_default_type -%>
DefaultType <%= @apache_default_type %>
<% else -%>
DefaultType None
<% end -%>

#
# HostnameLookups: Log the names of clients or just their IP addresses
# e.g., www.apache.org (on) or 204.62.129.132 (off).
# The default is off because it'd be overall better for the net if people
# had to knowingly turn this feature on, since enabling it means that
# each client request will result in AT LEAST one lookup request to the
# nameserver.
#
<% if @apache_hostname_lookups =~ /on/i -%>
HostnameLookups On
<% else -%>
HostnameLookups Off
<% end -%>

# ErrorLog: The location of the error log file.
# If you do not specify an ErrorLog directive within a <VirtualHost>
# container, error messages relating to that virtual host will be
# logged here.  If you *do* define an error logfile for a <VirtualHost>
# container, that host's errors will be logged there and not here.
#
<% if @apache_default_error_log -%>
ErrorLog ${APACHE_LOG_DIR}/<%= @apache_default_error_log %>
<% else -%>
ErrorLog ${APACHE_LOG_DIR}/error.log
<% end -%>

#
# LogLevel: Control the number of messages logged to the error_log.
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
#
<% if @apache_log_level -%>
LogLevel <%= @apache_log_level -%>
<% else -%>
LogLevel warn
<% end -%>

# Include module configuration:
Include mods-enabled/*.load
Include mods-enabled/*.conf

# Include all the user configurations:
Include httpd.conf

# Include ports listing
Include ports.conf

#
# The following directives define some format nicknames for use with
# a CustomLog directive (see below).
# If you are behind a reverse proxy, you might want to change %h into %{X-Forwarded-For}i
#
LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat "%h %l %u %t \"%r\" %>s %O" common
LogFormat "%{Referer}i -> %U" referer
LogFormat "%{User-agent}i" agent

# Include of directories ignores editors' and dpkg's backup files,
# see README.Debian for details.

# Include generic snippets of statements
Include conf.d/

# Include the virtual host configurations:
Include sites-enabled/
