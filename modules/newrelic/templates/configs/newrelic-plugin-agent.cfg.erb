%YAML 1.2
---
Application:
  license_key: 2c109dd6bf87f842b081c5023cb6e39ec8903197
  wake_interval: 60
  newrelic_api_timeout: 10
  #proxy: http://localhost:8080

<%- if @cq5_env == "qa06" -%>
<% $httpd_port = "8888" -%>
<%- else -%>
<% $httpd_port = "80" -%>
<% end -%>
  apache_httpd:
    name: <%= @fqdn %>
    scheme: http
    host: <%= @fqdn %>
    verify_ssl_cert: false
    port: <%= $httpd_port %>
    path: /server-status
<%- if @redis_backend -%>
  redis:
<%
  backends = []
  hosts    = []

  if @redis_backend
    if @redis_backend.kind_of?(Array)
      hosts = @redis_backend
    else
      if @redis_backend =~ /, /
        hosts = @redis_backend.split(', ')
      elsif @redis_backend =~ /,/
        hosts = @redis_backend.split(',')
      else
        hosts = @redis_backend.split
      end
    end
  else
    hosts = [ 'localhost' ]
  end

  backends = hosts.map do |host|
    if host =~ /:/
      host.split(':')
    else
      [ host ]
    end
  end
  backends.enum_with_index do |v,i|
-%>
    - name: <%= v %>
      host: <%= v %>
      port: 6379
      db_count: 16
<% end -%>
<% end -%>
  #redis:
  #  - name: localhost
  #    host: localhost
  #    port: 6379
  #    db_count: 16
  #    password: foo # [OPTIONAL]
  #    #path: /var/run/redis/redis.sock
  #  - name: localhost
  #    host: localhost
  #    port: 6380
  #    db_count: 16
  #    password: foo # [OPTIONAL]
  #    #path: /var/run/redis/redis.sock
  #couchdb:
  #  name: localhost
  #  host: localhost
  #  verify_ssl_cert: true
  #  port: 5984
  #  username: foo
  #  password: bar

  #elasticsearch:
  #  name: Clustername
  #  host: localhost
  #  port: 9200
  #  scheme: http

  #haproxy:
  #  name: hostname
  #  scheme: http
  #  host: localhost
  #  port: 80
  #  verify_ssl_cert: true
  #  path: /haproxy?stats;csv

  #memcached:
  #  name: localhost
  #  host: localhost
  #  port: 11211
  #  path: /path/to/unix/socket

  #mongodb:
  #  name: hostname
  #  host: localhost
  #  port: 27017
  #  admin_username: user
  #  admin_password: pass
  #  ssl: False
  #  ssl_keyfile: /path/to/keyfile
  #  ssl_certfile: /path/to/certfile
  #  ssl_cert_reqs: 0  # Should be 0 for ssl.CERT_NONE, 1 for ssl.CERT_OPTIONAL, 2 for ssl.CERT_REQUIRED
  #  ssl_ca_certs: /path/to/cacerts file
  #  databases:
  #    - test
  #    - yourdbname

  #mongodb:  # Use when authentication is required
  #  name: hostname
  #  host: localhost
  #  port: 27017
  #  admin_username: user
  #  admin_password: pass
  #  ssl: False
  #  ssl_keyfile: /path/to/keyfile
  #  ssl_certfile: /path/to/certfile
  #  ssl_cert_reqs: 0  # Should be 0 for ssl.CERT_NONE, 1 for ssl.CERT_OPTIONAL, 2 for ssl.CERT_REQUIRED
  #  ssl_ca_certs: /path/to/cacerts file
  #  databases:
  #    test:
  #      username: user
  #      password: pass
  #    yourdbname:
  #      username: user
  #      password: pass

  #nginx:
  #  name: hostname
  #  scheme: http
  #  host: localhost
  #  port: 80
  #  verify_ssl_cert: true
  #  path: /nginx_stub_status

  #pgbouncer:
  #  host: localhost
  #  port: 6000
  #  user: stats

  #php_apc:
  #  name: hostname
  #  scheme: http
  #  host: localhost
  #  verify_ssl_cert: true
  #  port: 80
  #  path: /apc-nrp.php

  #php_fpm:
  #  - name: fpm-pool
  #    scheme: https
  #    host: localhost
  #    port: 443
  #    path: /fpm_status
  #    query: json

  #postgresql:
  #  host: localhost
  #  port: 5432
  #  user: postgres
  #  dbname: postgres
  #  superuser: False

  #rabbitmq:
  #  name: rabbitmq@localhost
  #  host: localhost
  #  port: 15672
  #  verify_ssl_cert: true
  #  username: guest
  #  password: guest
  #  vhosts: # [OPTIONAL, track this vhosts' queues only]
  #    production_vhost:
  #      queues: [encode_video, ] # [OPTIONAL, track this queues only]
  #    staging_vhost: # [track every queue for this vhost]
  #
  #riak:
  #  name: localhost
  #  host: node0.riak0.scs.mtmeprod.net
  #  verify_ssl_cert: true
  #  port: 8098

  #uwsgi:
  #  name: localhost
  #  host: localhost
  #  port: 1717
  #  path: /path/to/unix/socket

Daemon:
  user: newrelic
  pidfile: /var/run/newrelic/newrelic-plugin-agent.pid

Logging:
  formatters:
    verbose:
      format: '%(levelname) -10s %(asctime)s %(process)-6d %(processName) -15s %(threadName)-10s %(name) -45s %(funcName) -25s L%(lineno)-6d: %(message)s'
  handlers:
    file:
      class : logging.handlers.RotatingFileHandler
      formatter: verbose
      filename: /var/log/newrelic/newrelic-plugin-agent.log
      maxBytes: 10485760
      backupCount: 3
  loggers:
    newrelic_plugin_agent:
      level: INFO
      propagate: True
      handlers: [console, file]
    requests:
      level: ERROR
      propagate: True
      handlers: [console, file]
