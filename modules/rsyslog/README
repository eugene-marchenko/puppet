= PUPPET MODULE:
  rsyslog

== REQUIREMENTS:

=== Platform and Application Environment:

Tested on Ubuntu 12.04.

== USAGE:

# Simple default install

class { 'rsyslog' : }
include rsyslog

# The AntiClass pattern

class { 'rsyslog' : installed => false }

# Facts:
# This module has some fact driven functionality, the following facts are 
# currently available for use:

rsyslog_options
rsyslog_modules
rsyslog_udp_enabled
rsyslog_tcp_enabled
rsyslog_relp_enabled
rsyslog_high_precision_timestamps
rsyslog_message_reduction
rsyslog_file_owner
rsyslog_file_group
rsyslog_file_createmode
rsyslog_dir_createmode
rsyslog_umask
rsyslog_priv_droptouser
rsyslog_priv_droptogroup
rsyslog_spool_dir
rsyslog_include_conf

These can be added to /etc/facter/facts/facts.yaml and then puppet will
dynamically update the templates with the values of those variables.

# Custom configs
# Rsyslog is a highly modular and customizable system logger. The default conf
# is placed in /etc/rsyslog.d/50-default.conf. This mimics old syslog values
# and logs facilities to the standard file locations. If you wish to filter
# messages to more granular files, for instance, if you're running a central
# log server, you can create filters with a number less than 50, e.g.
# /etc/rsyslog.d/49-my-custom-log-filter, and as long as you discard the
# filtered messages with ~, they won't show up in the default logs, like
# /var/log/syslog.

# For example, say you have node1, which runs a web server, and you want
# to ship those logs to a remote server on node2. Here's an example config:

node 'node1' {
  include rsyslog
  rsyslog::config::property { '49-web-server':
    property  => 'syslogtag',
    condition => 'contains',
    value     => '[APACHE]',
    destination => '@node2.example.com',
  }
}

node 'node2' {
  $rsyslog_enable_udp = 'true' <---- This can also be set as a fact 
  include rsyslog
  rsyslog::config::property { '49-web-server':
    property => 'syslogtag',
    condition => 'contains',
    value     => '[APACHE]',
    destination => '/var/log/generic_web_server.log',
  }
}

# The above example will filter out all messages tagged with [APACHE] to
# the central syslog server and that server will in turn log those to a
# specific file.

# If you have a need to create a non-templated custom file, then use
# rsyslog::config::file. It will spit out to a file in /etc/rsyslog.d the
# text you pass. For example, to create a custom template,

rsyslog::config::file { '02-template-ncsa' : content => '$template NCSA,"%msg:2:$%\n"' }

== CAVEATS:

May work on other platforms. Only tested on Ubuntu 12.04. Currently
Ubuntu/Debian is only explicitly supported vi the params.pp. You can add other
OS support via that class.

This module does not create any directories for you, so if you are pushing
logs to a non-standard path, you will need to create that directory structure
first.

If you want to run with TCP enabled on a port lower than 1024, you will need to
run rsyslog as root. By default is drops privs to syslog. To do so, you can
manage the facts: rsyslog_priv_droptouser, rsyslog_priv_droptogroup

== LICENSE:

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
